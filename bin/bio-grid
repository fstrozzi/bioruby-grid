#!/usr/bin/env ruby

require 'optparse'
$:<< File.expand_path(File.join(File.dirname(File.dirname __FILE__),"lib"))
require 'bioruby-grid'

options = {}
options[:sep] = ","

optparse = OptionParser.new do |opts|	
	opts.banner = "\nCopyright(c) 2012 Francesco Strozzi\nUtility to create and distribute jobs on a queue system.\n\nE.g. #{$0} -i \"/Project_X/Sample_Y/*_R1_*.fastq\",\"/Project_X/Sample_Y/*_R2_*.fastq\" --name bowtie2 -s 10 -p 12 --command-line \"/software/bowtie2 -x /genomes/bowtie2_index/genome_index -1 <input1> -2 <input2> -p 12 > <output>.sam\" --output /tmp/Sample_Y_mapping --copy-to /archive/Sample_Y_mapping --erease-output\n\n\n"

	opts.on("-n","--name NAME","Analysis name") do |name|
		options[:name] = name
	end

	opts.on("-s","--split-number NUMBER","Number of input files (or group of files) to use per job. If all the files in a location need to be used for a single job, just specify 'all'") do |number| 
		options[:number] = number
	end

	opts.on("-p","--processes PROCESSES","Number of processes per job") do |processes|
		options[:processes] = processes
	end

	opts.on("-c","--command-line COMMANDLINE","Command line to be executed") do |cmd|
		options[:cmd] = cmd
	end

	opts.on("-o","--output OUTPUT","Output folder. Needs a <output> placeholder in the command line") do |out|
		options[:output] = out
	end

	opts.on("-r","--copy-to LOCATION","Copy the output once a job is terminated") do |location|
		options[:copy] = location
	end

	opts.on("-e","--erease-output","Delete job output data when completed (useful to delete output temporary files on a computing node)") do |clean|
		options[:clean] = true
	end

	opts.on("-a","--params PARAM1,PARAM2...",Array,"List of parameters to use for testing. Needs a <param> placeholder in the command line") do |params|
		options[:params] = params
	end

	opts.on("-d","--dry","Dry run. Just write the job scripts without sending them in queue (for debugging or testing)") {options[:dry] = true}

	opts.on("-t","--test","Start the mapping only with the first group of reads (e.g. for testing parameters)") do |test|
		options[:test] = true
	end

	opts.on("-i","--input INPUT1,INPUT2...",Array,"Location where to find input files (accepts wildcards). Needs <input(1,2,3...> placeholder(s) in the command line") do |input|
		options[:input] = input
	end

	opts.on("--sep SEPARATOR","Input file separator [Default: , ]") do |sep|
		options[:sep] = sep
	end

	opts.on("--keep-scripts","Keep all the running scripts created for all the jobs") {options[:keep] = true}

	opts.on("-h","--help","Display this screen") do
		puts opts
		print "\n"
	end
end

optparse.parse!

raise OptionParser::MissingArgument,"-i, --input [INPUT1,INPUT2...]\n" if options[:input].nil?
raise OptionParser::MissingArgument,"-c, --command-line [command line]\n" if options[:cmd].nil?
raise OptionParser::MissingArgument,"-n, --name [analysis name]\n" if options[:name].nil?
raise OptionParser::MissingArgument,"-o, --output [output folder]\n" if options[:output].nil?

Bio::Grid.run(options)


